import OpenSSL
import base64
import json
import hashlib
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

# Create RSA public and private keys
key = OpenSSL.crypto.PKey()
key.generate_key(type=OpenSSL.crypto.TYPE_RSA,bits=2048)
priv = key.to_cryptography_key()
pub = priv.public_key()

header = { "alg":"RS256",
           "jwk": { "kty":"RSA",
                    "kid":"bilbo.baggins@hobbiton.example",
                    "use":"sig"
                  }
          }
payload = "YWRtaW4"

e = pub.public_numbers().e
n = pub.public_numbers().n

header["jwk"]["e"] = base64.urlsafe_b64encode((e).to_bytes((e).bit_length()//8+1,byteorder='big')).decode('utf8').rstrip("=")
header["jwk"]["n"] = base64.urlsafe_b64encode((n).to_bytes((n).bit_length()//8+1,byteorder='big')).decode('utf8').rstrip("=")

data = base64.urlsafe_b64encode(bytes(json.dumps(header), encoding='utf8')).decode('UTF-8').rstrip("=") + '.' \
    + payload
sig = base64.urlsafe_b64encode(priv.sign(bytes(data, encoding='utf8'), algorithm=hashes.SHA256(), padding=padding.PKCS1v15())).decode('UTF-8').rstrip("=")

print('JWT: ' + data + '.' + sig)
